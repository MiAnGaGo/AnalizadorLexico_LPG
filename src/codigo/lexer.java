/* The following code was generated by JFlex 1.4.3 on 11/18/19 5:51 p.m. */

package codigo;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java_cup.runtime.Symbol;
import JFlex.sym;
import static codigo.token.*;

/* SECCION DE DECLARACIONES DE JFLEX */ 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/18/19 5:51 p.m. from the specification file
 * <tt>C:/Users/criss/OneDrive/Documentos/NetBeansProjects/AnalizadorLexicoLPG/src/codigo/lexer.flex</tt>
 */
class lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\11\2\0\1\4\22\0\1\4\1\20\1\12\2\0"+
    "\1\15\1\17\1\0\1\5\1\7\1\14\1\13\1\4\1\6\1\31"+
    "\1\10\2\3\1\102\7\3\1\27\1\30\1\21\1\22\1\21\2\0"+
    "\1\71\1\61\1\62\1\45\1\66\1\100\1\54\1\1\1\76\2\1"+
    "\1\46\1\63\1\1\1\74\1\64\1\1\1\101\1\60\1\70\1\1"+
    "\1\65\4\1\1\23\1\0\1\24\1\0\1\57\1\0\1\33\1\35"+
    "\1\32\1\34\1\40\1\53\1\52\1\2\1\47\1\56\1\2\1\37"+
    "\1\44\1\41\1\36\1\50\1\2\1\51\1\55\1\42\1\43\1\75"+
    "\1\2\1\73\1\72\1\67\1\25\1\16\1\26\163\0\1\77\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\3\6\2\1\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\3\2"+
    "\1\1\1\2\1\0\1\24\1\4\1\25\1\12\1\13"+
    "\1\26\3\2\2\0\2\2\1\0\3\2\14\0\2\2"+
    "\1\3\3\2\1\27\33\0\5\2\40\0\1\27\5\0"+
    "\2\2\1\0\1\2\31\0\1\27\15\0\2\2\1\0"+
    "\1\2\5\0\1\27\36\0\2\2\1\0\1\2\36\0"+
    "\2\2\1\0\1\2\36\0\1\2\1\0\1\2\24\0"+
    "\1\2\4\0\1\27\61\0\1\27\25\0\1\27\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\103"+
    "\0\u01d5\0\103\0\103\0\u0218\0\u025b\0\103\0\u029e\0\u02e1"+
    "\0\u0324\0\u0324\0\u0324\0\103\0\103\0\103\0\103\0\u0367"+
    "\0\103\0\103\0\u03aa\0\u03ed\0\u0430\0\u0473\0\u04b6\0\u04f9"+
    "\0\103\0\u053c\0\103\0\103\0\103\0\103\0\u057f\0\u05c2"+
    "\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754\0\u0797\0\u07da"+
    "\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c\0\u09af\0\u09f2"+
    "\0\u0a35\0\u0a78\0\u0abb\0\u0afe\0\u0b41\0\u0b84\0\u0bc7\0\103"+
    "\0\u0c0a\0\u0c4d\0\u0c90\0\u0cd3\0\u0d16\0\u0d59\0\u0d9c\0\u0ddf"+
    "\0\u0e22\0\u0e65\0\u0ea8\0\u0eeb\0\u0f2e\0\u0f71\0\u0fb4\0\u0ff7"+
    "\0\u103a\0\u107d\0\u10c0\0\u1103\0\u1146\0\u1189\0\u11cc\0\u120f"+
    "\0\u1252\0\u1295\0\u12d8\0\u131b\0\u135e\0\u13a1\0\u13e4\0\u1427"+
    "\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc\0\u163f"+
    "\0\u1682\0\u16c5\0\u1708\0\u174b\0\u178e\0\u17d1\0\u1814\0\u1857"+
    "\0\u189a\0\u18dd\0\u1920\0\u1963\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f"+
    "\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b\0\u1bbe\0\u1c01\0\u1c44\0\u1c87"+
    "\0\u1cca\0\u1d0d\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u1e5c\0\u1e9f"+
    "\0\u1ee2\0\u1f25\0\u1f68\0\u1fab\0\u1fee\0\u2031\0\u2074\0\u20b7"+
    "\0\u20fa\0\u213d\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf"+
    "\0\u2312\0\u2355\0\u2398\0\u23db\0\u241e\0\u2461\0\u24a4\0\u24e7"+
    "\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u26bc\0\u26ff"+
    "\0\u2742\0\u2785\0\u27c8\0\u280b\0\u284e\0\u2891\0\u28d4\0\u2917"+
    "\0\u295a\0\u299d\0\u29e0\0\u2a23\0\u2a66\0\u2aa9\0\u2aec\0\u2b2f"+
    "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u2c7e\0\u2cc1\0\103\0\u2d04"+
    "\0\u2d47\0\u2d8a\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u2ed9\0\u2f1c"+
    "\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028\0\u306b\0\u30ae\0\u30f1\0\u3134"+
    "\0\u3177\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c"+
    "\0\u338f\0\u33d2\0\u3415\0\u3458\0\u349b\0\u34de\0\u3521\0\u3564"+
    "\0\u35a7\0\u35ea\0\u362d\0\u3670\0\u36b3\0\u36f6\0\u3739\0\u377c"+
    "\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e\0\u3951\0\u3994"+
    "\0\u39d7\0\u3a1a\0\u3a5d\0\u3aa0\0\u3ae3\0\u3b26\0\u3b69\0\u3bac"+
    "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"+
    "\0\u3e07\0\u3e4a\0\u3e8d\0\u3ed0\0\u3f13\0\u3f56\0\u3f99\0\u3fdc"+
    "\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e\0\u41b1\0\u41f4"+
    "\0\u4237\0\u427a\0\u42bd\0\u4300\0\u4343\0\u4386\0\u43c9\0\u440c"+
    "\0\u444f\0\u4492\0\u44d5\0\u4518\0\u455b\0\u459e\0\u45e1\0\u4624"+
    "\0\u4667\0\u46aa\0\u46ed\0\u4730\0\u4773\0\u47b6\0\u47f9\0\u483c"+
    "\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b\0\u49ce\0\u4a11\0\u4a54"+
    "\0\u4a97\0\u4ada\0\u4b1d\0\u4b60\0\u4ba3\0\u4be6\0\u4c29\0\u4c6c"+
    "\0\u4caf\0\u4cf2\0\u4d35\0\u4d78\0\u4dbb\0\u4dfe\0\u4e41\0\u4e84"+
    "\0\u4ec7\0\u4f0a\0\u4f4d\0\u4f90\0\u4fd3\0\u5016\0\u5059\0\u509c"+
    "\0\u50df\0\u5122\0\u5165\0\u51a8\0\u51eb\0\u522e\0\u5271\0\u52b4"+
    "\0\u52f7\0\u533a\0\u537d\0\u53c0\0\u5403\0\u5446\0\u5489\0\u54cc"+
    "\0\u550f\0\u5552\0\u5595\0\u55d8\0\u561b\0\u565e\0\u56a1\0\u56e4"+
    "\0\u5727\0\u576a\0\u57ad\0\u57f0\0\u5833\0\u5876\0\u58b9\0\u58fc"+
    "\0\u593f\0\u5982\0\u59c5\0\u5a08\0\u5a4b\0\u5a8e\0\u5ad1\0\u5b14"+
    "\0\u5b57\0\u5b9a\0\u5bdd\0\u5c20\0\u5c63\0\u5ca6\0\u5ce9\0\u5d2c"+
    "\0\u5d6f\0\u5db2\0\u5df5\0\u5e38\0\u5e7b\0\u5ebe\0\u5f01\0\u5f44"+
    "\0\u5f87\0\u5fca\0\u600d\0\u6050\0\u6093\0\u60d6\0\u6119\0\u615c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\3\1\35\6\3\1\2\1\36"+
    "\1\3\1\37\3\3\1\2\2\3\10\2\1\3\2\2"+
    "\2\3\1\2\1\3\4\2\1\4\104\0\3\3\26\0"+
    "\25\3\1\0\17\3\1\0\3\3\3\0\1\4\76\0"+
    "\1\4\4\0\1\5\104\0\1\40\102\0\1\41\104\0"+
    "\1\42\105\0\1\43\103\0\1\16\104\0\1\44\103\0"+
    "\1\44\105\0\1\45\102\0\1\46\61\0\3\3\26\0"+
    "\4\3\1\47\20\3\1\0\17\3\1\0\3\3\1\0"+
    "\3\3\26\0\1\50\24\3\1\0\17\3\1\0\3\3"+
    "\1\0\3\3\26\0\17\3\1\51\5\3\1\0\17\3"+
    "\1\0\3\3\46\0\1\52\5\0\1\53\27\0\3\3"+
    "\26\0\5\3\1\54\11\3\1\55\5\3\1\0\17\3"+
    "\1\0\3\3\3\0\1\56\76\0\1\56\11\42\1\0"+
    "\71\42\1\0\3\3\26\0\5\3\1\57\17\3\1\0"+
    "\17\3\1\0\3\3\1\0\3\3\26\0\11\3\1\60"+
    "\13\3\1\0\17\3\1\0\3\3\1\0\3\3\26\0"+
    "\2\3\1\61\22\3\1\0\17\3\1\0\3\3\45\0"+
    "\1\62\74\0\1\63\6\0\1\64\2\0\1\65\5\0"+
    "\1\66\2\0\1\67\1\70\1\71\1\72\1\73\1\0"+
    "\1\74\10\0\1\75\2\0\3\3\26\0\1\3\1\76"+
    "\23\3\1\0\17\3\1\0\3\3\1\0\3\3\26\0"+
    "\4\3\1\77\20\3\1\0\17\3\1\0\3\3\3\0"+
    "\1\56\3\0\1\100\72\0\1\56\1\0\3\3\26\0"+
    "\4\3\1\101\20\3\1\0\17\3\1\0\3\3\1\0"+
    "\3\3\26\0\12\3\1\102\12\3\1\0\17\3\1\0"+
    "\3\3\1\0\3\3\26\0\6\3\1\103\16\3\1\0"+
    "\17\3\1\0\3\3\54\0\1\104\75\0\1\105\66\0"+
    "\1\106\105\0\1\107\111\0\1\110\1\111\11\0\1\112"+
    "\1\0\1\113\1\114\1\115\1\116\1\117\1\0\1\120"+
    "\1\121\4\0\1\122\2\0\1\123\37\0\1\124\12\0"+
    "\1\125\64\0\1\126\2\0\1\127\102\0\1\130\102\0"+
    "\1\131\1\0\1\132\106\0\1\133\11\0\1\134\57\0"+
    "\1\135\4\0\1\136\102\0\1\137\43\0\3\3\26\0"+
    "\7\3\1\140\15\3\1\0\17\3\1\0\3\3\1\0"+
    "\3\3\26\0\21\3\1\141\3\3\1\0\17\3\1\0"+
    "\3\3\1\0\3\3\26\0\17\3\1\142\5\3\1\0"+
    "\17\3\1\0\3\3\1\0\3\3\26\0\11\3\1\143"+
    "\13\3\1\0\17\3\1\0\3\3\1\0\3\3\26\0"+
    "\7\3\1\144\15\3\1\0\17\3\1\0\3\3\32\0"+
    "\1\145\5\0\1\146\10\0\1\147\75\0\1\150\125\0"+
    "\1\151\55\0\1\152\76\0\1\153\107\0\1\154\3\0"+
    "\1\155\71\0\1\156\102\0\1\124\4\0\1\157\102\0"+
    "\1\160\75\0\1\161\1\162\3\0\1\163\5\0\1\164"+
    "\100\0\1\165\110\0\1\166\65\0\1\167\10\0\1\170"+
    "\63\0\1\171\4\0\1\172\104\0\1\173\115\0\1\174"+
    "\65\0\1\175\103\0\1\176\104\0\1\177\74\0\1\200"+
    "\20\0\1\201\102\0\1\202\64\0\1\203\104\0\1\204"+
    "\7\0\1\205\101\0\1\206\72\0\1\207\106\0\1\210"+
    "\107\0\1\211\75\0\1\212\37\0\3\3\26\0\10\3"+
    "\1\213\14\3\1\0\17\3\1\0\3\3\1\0\3\3"+
    "\26\0\11\3\1\214\13\3\1\0\17\3\1\0\3\3"+
    "\1\0\3\3\26\0\25\3\1\215\17\3\1\0\3\3"+
    "\1\0\3\3\26\0\5\3\1\216\17\3\1\0\17\3"+
    "\1\0\3\3\1\0\3\3\26\0\25\3\1\217\17\3"+
    "\1\0\3\3\36\0\1\220\4\0\1\221\114\0\1\222"+
    "\65\0\1\223\112\0\1\224\70\0\1\225\77\0\1\226"+
    "\104\0\1\227\111\0\1\230\77\0\1\231\100\0\1\232"+
    "\76\0\1\233\107\0\1\234\101\0\1\235\76\0\1\236"+
    "\110\0\1\237\77\0\1\240\121\0\1\241\67\0\1\242"+
    "\133\0\1\243\56\0\1\244\76\0\1\245\112\0\1\246"+
    "\63\0\1\247\127\0\1\250\57\0\1\226\77\0\1\251"+
    "\107\0\1\252\10\0\1\253\67\0\1\254\106\0\1\255"+
    "\107\0\1\256\130\0\1\257\47\0\1\260\102\0\1\247"+
    "\100\0\1\261\74\0\1\262\103\0\1\263\113\0\1\264"+
    "\74\0\1\265\45\0\3\3\26\0\15\3\1\266\7\3"+
    "\1\0\17\3\1\0\3\3\1\0\3\3\26\0\7\3"+
    "\1\267\15\3\1\0\17\3\1\0\3\3\61\0\1\270"+
    "\22\0\3\3\26\0\1\3\1\271\23\3\1\0\17\3"+
    "\1\0\3\3\50\0\1\272\73\0\1\273\76\0\1\273"+
    "\120\0\1\274\61\0\1\275\117\0\1\276\117\0\1\272"+
    "\67\0\1\277\70\0\1\300\112\0\1\301\73\0\1\302"+
    "\100\0\1\277\100\0\1\303\123\0\1\304\74\0\1\305"+
    "\74\0\1\306\103\0\1\307\113\0\1\310\16\0\1\311"+
    "\52\0\1\312\100\0\1\313\104\0\1\314\73\0\1\315"+
    "\113\0\1\316\71\0\1\277\116\0\1\317\124\0\1\277"+
    "\62\0\1\320\102\0\1\321\100\0\1\322\116\0\1\323"+
    "\1\324\1\325\66\0\1\326\63\0\1\327\110\0\1\330"+
    "\75\0\1\331\136\0\1\152\56\0\1\332\136\0\1\333"+
    "\52\0\1\334\67\0\1\335\47\0\3\3\26\0\5\3"+
    "\1\336\17\3\1\0\17\3\1\0\3\3\1\0\3\3"+
    "\26\0\2\3\1\337\22\3\1\0\17\3\1\0\3\3"+
    "\43\0\1\340\40\0\3\3\26\0\1\341\24\3\1\0"+
    "\17\3\1\0\3\3\51\0\1\342\67\0\1\343\104\0"+
    "\1\344\104\0\1\345\73\0\1\346\107\0\1\277\103\0"+
    "\1\347\74\0\1\350\120\0\1\351\73\0\1\352\112\0"+
    "\1\353\72\0\1\354\76\0\1\355\107\0\1\356\77\0"+
    "\1\357\75\0\1\360\120\0\1\361\74\0\1\362\100\0"+
    "\1\363\104\0\1\364\71\0\1\300\135\0\1\365\64\0"+
    "\1\366\122\0\1\367\46\0\1\370\105\0\1\161\113\0"+
    "\1\371\66\0\1\372\116\0\1\373\104\0\1\374\72\0"+
    "\1\246\73\0\1\375\106\0\1\376\105\0\1\152\101\0"+
    "\1\377\43\0\3\3\26\0\5\3\1\u0100\17\3\1\0"+
    "\17\3\1\0\3\3\1\0\3\3\26\0\15\3\1\u0101"+
    "\7\3\1\0\17\3\1\0\3\3\53\0\1\u0102\30\0"+
    "\3\3\26\0\15\3\1\u0103\7\3\1\0\17\3\1\0"+
    "\3\3\47\0\1\u0104\101\0\1\u0105\11\0\1\u0106\73\0"+
    "\1\u0107\64\0\1\u0108\120\0\1\u0109\67\0\1\u010a\121\0"+
    "\1\277\1\0\1\u010b\56\0\1\u010c\120\0\1\u010d\67\0"+
    "\1\u010e\113\0\1\u010f\110\0\1\277\66\0\1\u0110\73\0"+
    "\1\u0111\127\0\1\u0112\63\0\1\232\113\0\1\246\103\0"+
    "\1\u0113\67\0\1\u0114\103\0\1\u0115\75\0\1\u0116\133\0"+
    "\1\u0117\7\0\1\u0118\1\0\1\u0119\46\0\1\u011a\115\0"+
    "\1\u011b\76\0\1\u011c\67\0\1\u011d\135\0\1\u011e\60\0"+
    "\1\u011f\120\0\1\u0120\54\0\1\u0121\44\0\3\3\26\0"+
    "\1\3\1\142\23\3\1\0\17\3\1\0\3\3\1\0"+
    "\3\3\26\0\2\3\1\u0122\22\3\1\0\17\3\1\0"+
    "\3\3\53\0\1\u0123\30\0\3\3\26\0\4\3\1\u0124"+
    "\20\3\1\0\17\3\1\0\3\3\41\0\1\u0125\110\0"+
    "\1\u0126\71\0\1\u0116\77\0\1\343\110\0\1\343\122\0"+
    "\1\u0127\76\0\1\246\73\0\1\u0105\13\0\1\u0128\54\0"+
    "\1\u0129\106\0\1\u012a\103\0\1\232\100\0\1\u012b\77\0"+
    "\1\232\100\0\1\u012c\133\0\1\u012d\62\0\1\u012e\72\0"+
    "\1\u0111\110\0\1\204\100\0\1\277\103\0\1\u012f\113\0"+
    "\1\u0130\65\0\1\u0131\117\0\1\u0132\74\0\1\u0133\137\0"+
    "\1\u0134\43\0\1\376\124\0\1\u0135\55\0\1\u0136\104\0"+
    "\1\u0137\75\0\1\u0138\50\0\3\3\26\0\1\3\1\u0139"+
    "\23\3\1\0\17\3\1\0\3\3\40\0\1\u013a\43\0"+
    "\3\3\26\0\7\3\1\142\15\3\1\0\17\3\1\0"+
    "\3\3\32\0\1\u013b\111\0\1\277\104\0\1\u013c\106\0"+
    "\1\u013d\71\0\1\u013e\102\0\1\u013f\103\0\1\246\112\0"+
    "\1\u0140\71\0\1\u0141\103\0\1\u0142\114\0\1\u0143\73\0"+
    "\1\u0144\100\0\1\u0145\111\0\1\u0146\66\0\1\u0147\112\0"+
    "\1\u0148\75\0\1\u0149\105\0\1\u014a\102\0\1\u014b\75\0"+
    "\1\u014c\47\0\3\3\26\0\2\3\1\142\22\3\1\0"+
    "\17\3\1\0\3\3\51\0\1\u014d\100\0\1\u014e\106\0"+
    "\1\u014f\61\0\1\156\127\0\1\u0150\106\0\1\u0151\55\0"+
    "\1\u0126\100\0\1\u0152\104\0\1\u0153\121\0\1\u0154\63\0"+
    "\1\u0155\105\0\1\u0156\130\0\1\277\52\0\1\u0157\104\0"+
    "\1\u0111\116\0\1\u0158\73\0\1\u0159\76\0\1\u015a\76\0"+
    "\1\u011c\123\0\1\u015b\73\0\1\366\105\0\1\u015c\75\0"+
    "\1\u0105\77\0\1\u015d\77\0\1\156\117\0\1\277\1\0"+
    "\1\u015e\73\0\1\u015f\104\0\1\u0160\72\0\1\u0161\107\0"+
    "\1\u0162\75\0\1\u0163\107\0\1\u0164\66\0\1\u0165\130\0"+
    "\1\u0166\61\0\1\u0167\101\0\1\u0168\111\0\1\u0105\22\0"+
    "\1\u0169\51\0\1\u016a\113\0\1\u016b\100\0\1\u016c\122\0"+
    "\1\u0114\64\0\1\152\72\0\1\u016d\102\0\1\u016e\110\0"+
    "\1\u016f\104\0\1\u0170\73\0\1\u0171\75\0\1\u0172\77\0"+
    "\1\u0173\103\0\1\u0174\103\0\1\u0175\106\0\1\u0176\75\0"+
    "\1\u0177\111\0\1\277\122\0\1\u0178\67\0\1\u0179\66\0"+
    "\1\u017a\111\0\1\u017b\113\0\1\u017c\62\0\1\u017d\102\0"+
    "\1\355\145\0\1\u017e\42\0\1\124\114\0\1\227\73\0"+
    "\1\u017f\110\0\1\u0180\102\0\1\u0181\67\0\1\277\107\0"+
    "\1\u0182\110\0\1\u0183\130\0\1\246\37\0\1\u0184\117\0"+
    "\1\u0185\65\0\1\232\103\0\1\u0186\101\0\1\u0187\152\0"+
    "\1\u0188\47\0\1\232\100\0\1\277\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[24991];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\5\1\1\11\1\1\2\11\2\1\1\11"+
    "\5\1\4\11\1\1\2\11\5\1\1\0\1\11\1\1"+
    "\4\11\3\1\2\0\2\1\1\0\3\1\14\0\2\1"+
    "\1\11\4\1\33\0\5\1\40\0\1\1\5\0\2\1"+
    "\1\0\1\1\31\0\1\1\15\0\2\1\1\0\1\1"+
    "\5\0\1\11\36\0\2\1\1\0\1\1\36\0\2\1"+
    "\1\0\1\1\36\0\1\1\1\0\1\1\24\0\1\1"+
    "\4\0\1\1\61\0\1\1\25\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[392];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
public String lexeme;
guardarInfoCod c = new guardarInfoCod();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 7: 
          { c.linea=yyline;lexeme=yytext(); return parentesis_c;
          }
        case 24: break;
        case 16: 
          { c.linea=yyline;lexeme=yytext(); return llave_c;
          }
        case 25: break;
        case 10: 
          { c.linea=yyline; lexeme=yytext(); return op_logico;
          }
        case 26: break;
        case 13: 
          { c.linea=yyline;lexeme=yytext(); return corchete_a;
          }
        case 27: break;
        case 23: 
          { c.linea=yyline;lexeme=yytext(); return p_reservada;
          }
        case 28: break;
        case 11: 
          { c.linea=yyline;lexeme=yytext(); return op_relacional;
          }
        case 29: break;
        case 8: 
          { c.linea=yyline;lexeme=yytext();return saltoLinea;
          }
        case 30: break;
        case 5: 
          { c.linea=yyline;lexeme=yytext(); return parentesis_a;
          }
        case 31: break;
        case 17: 
          { c.linea=yyline;lexeme=yytext(); return dos_puntos;
          }
        case 32: break;
        case 15: 
          { c.linea=yyline;lexeme=yytext(); return llave_a;
          }
        case 33: break;
        case 9: 
          { c.linea=yyline;lexeme=yytext();return comillas;
          }
        case 34: break;
        case 12: 
          { c.linea=yyline;lexeme=yytext(); return op_asignacion;
          }
        case 35: break;
        case 19: 
          { c.linea=yyline;lexeme=yytext(); return simbol_p;
          }
        case 36: break;
        case 2: 
          { c.linea=yyline;lexeme=yytext(); return identificador;
          }
        case 37: break;
        case 20: 
          { c.linea=yyline;lexeme=yytext(); return op_decremento;
          }
        case 38: break;
        case 1: 
          { c.linea=yyline;lexeme=yytext(); return ERROR;
          }
        case 39: break;
        case 22: 
          { c.linea=yyline;lexeme=yytext(); return otros;
          }
        case 40: break;
        case 18: 
          { c.linea=yyline;lexeme=yytext(); return p_coma;
          }
        case 41: break;
        case 4: 
          { /*Ignore*/
          }
        case 42: break;
        case 21: 
          { c.linea=yyline;lexeme=yytext();return op_incremento;
          }
        case 43: break;
        case 6: 
          { c.linea=yyline;lexeme=yytext(); return op_aritmetico;
          }
        case 44: break;
        case 14: 
          { c.linea=yyline;lexeme=yytext(); return corchete_c;
          }
        case 45: break;
        case 3: 
          { c.linea=yyline;lexeme=yytext(); return numero;
          }
        case 46: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
